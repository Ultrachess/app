{
  "address": "0xDe1ae319adBe59aeE53194f033B53adAfB9d3d8C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "epochHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint128",
              "name": "firstIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastIndex",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct History.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "NewClaimToHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proofContext",
          "type": "bytes"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensus",
          "type": "address"
        }
      ],
      "name": "migrateToConsensus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_claimData",
          "type": "bytes"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8eb88bdf96914178c6799eb5882e2808b1b039ac4d91b54940fdb8e4517014fd",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "494722",
    "logsBloom": "0x
    "blockHash": "0xb869e790991e5724965062b9746f1d5b7aa9d76d6ba2ebe64e7bba125e7f9eb3",
    "transactionHash": "0x8eb88bdf96914178c6799eb5882e2808b1b039ac4d91b54940fdb8e4517014fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0x8eb88bdf96914178c6799eb5882e2808b1b039ac4d91b54940fdb8e4517014fd",
        "address": "0xDe1ae319adBe59aeE53194f033B53adAfB9d3d8C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb869e790991e5724965062b9746f1d5b7aa9d76d6ba2ebe64e7bba125e7f9eb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0x8eb88bdf96914178c6799eb5882e2808b1b039ac4d91b54940fdb8e4517014fd",
        "address": "0xDe1ae319adBe59aeE53194f033B53adAfB9d3d8C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000001b282530a52f67ce4613fe52d90273f960910afc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb869e790991e5724965062b9746f1d5b7aa9d76d6ba2ebe64e7bba125e7f9eb3"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "494722",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1B282530a52F67ce4613Fe52D90273f960910afc"
  ],
  "numDeployments": 1,
  "solcInputHash": "ccf852a6f03ad282136085842817ac99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"epochHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"firstIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastIndex\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct History.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"NewClaimToHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proofContext\",\"type\":\"bytes\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensus\",\"type\":\"address\"}],\"name\":\"migrateToConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract inherits OpenZeppelin's `Ownable` contract.      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\",\"events\":{\"NewClaimToHistory(address,(bytes32,uint128,uint128))\":{\"details\":\"MUST be triggered on a successful call to `submitClaim`.\",\"params\":{\"claim\":\"The newly-submitted claim\",\"dapp\":\"The address of the DApp\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_owner\":\"The initial owner\"}},\"getClaim(address,bytes)\":{\"params\":{\"_dapp\":\"The DApp address\",\"_proofContext\":\"Data for retrieving the desired claim\"},\"returns\":{\"_0\":\"The claimed epoch hash\",\"_1\":\"The index of the first input of the epoch in the input box\",\"_2\":\"The index of the last input of the epoch in the input box\"}},\"migrateToConsensus(address)\":{\"details\":\"Emits an `OwnershipTransferred` event. Should have access control.\",\"params\":{\"_consensus\":\"The new consensus\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"submitClaim(bytes)\":{\"details\":\"Emits a `NewClaimToHistory` event. Should have access control.\",\"params\":{\"_claimData\":\"Data for submitting a claim\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"claims\":{\"details\":\"See the `getClaim` and `submitClaim` functions.\"}},\"title\":\"Simple History\",\"version\":1},\"userdoc\":{\"events\":{\"NewClaimToHistory(address,(bytes32,uint128,uint128))\":{\"notice\":\"A new claim regarding a specific DApp was submitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates a `History` contract.\"},\"getClaim(address,bytes)\":{\"notice\":\"Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.\"},\"migrateToConsensus(address)\":{\"notice\":\"Transfer ownership to another consensus.\"},\"submitClaim(bytes)\":{\"notice\":\"Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.\"}},\"notice\":\"This contract stores claims for each DApp individually. This means that, for each DApp, the contract stores an array of `Claim` entries, where each `Claim` is composed of: * An epoch hash (`bytes32`) * A closed interval of input indices (`uint128`, `uint128`) The contract guarantees that the first interval starts at index 0, and that the following intervals don't have gaps or overlaps. Furthermore, claims can only be submitted by the contract owner through `submitClaim`, but can be retrieved by anyone with `getClaim`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/history/History.sol\":\"History\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/history/History.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IHistory} from \\\"./IHistory.sol\\\";\\n\\n/// @title Simple History\\n///\\n/// @notice This contract stores claims for each DApp individually.\\n/// This means that, for each DApp, the contract stores an array of\\n/// `Claim` entries, where each `Claim` is composed of:\\n///\\n/// * An epoch hash (`bytes32`)\\n/// * A closed interval of input indices (`uint128`, `uint128`)\\n///\\n/// The contract guarantees that the first interval starts at index 0,\\n/// and that the following intervals don't have gaps or overlaps.\\n///\\n/// Furthermore, claims can only be submitted by the contract owner\\n/// through `submitClaim`, but can be retrieved by anyone with `getClaim`.\\n///\\n/// @dev This contract inherits OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract History is IHistory, Ownable {\\n    struct Claim {\\n        bytes32 epochHash;\\n        uint128 firstIndex;\\n        uint128 lastIndex;\\n    }\\n\\n    /// @notice Mapping from DApp address to array of claims.\\n    /// @dev See the `getClaim` and `submitClaim` functions.\\n    mapping(address => Claim[]) internal claims;\\n\\n    /// @notice A new claim regarding a specific DApp was submitted.\\n    /// @param dapp The address of the DApp\\n    /// @param claim The newly-submitted claim\\n    /// @dev MUST be triggered on a successful call to `submitClaim`.\\n    event NewClaimToHistory(address indexed dapp, Claim claim);\\n\\n    /// @notice Creates a `History` contract.\\n    /// @param _owner The initial owner\\n    constructor(address _owner) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (_owner != msg.sender) {\\n            transferOwnership(_owner);\\n        }\\n    }\\n\\n    /// @notice Submit a claim regarding a DApp.\\n    /// There are several requirements for this function to be called successfully.\\n    ///\\n    /// * `_claimData` MUST be well-encoded. In Solidity, it can be constructed\\n    ///   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)\\n    ///   and `claim` is the claim structure (type `Claim`).\\n    ///\\n    /// * `firstIndex` MUST be less than or equal to `lastIndex`.\\n    ///   As a result, every claim MUST encompass AT LEAST one input.\\n    ///\\n    /// * If this is the DApp's first claim, then `firstIndex` MUST be `0`.\\n    ///   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.\\n    ///   In other words, claims MUST NOT skip inputs.\\n    ///\\n    /// @inheritdoc IHistory\\n    /// @dev Emits a `NewClaimToHistory` event. Should have access control.\\n    function submitClaim(\\n        bytes calldata _claimData\\n    ) external override onlyOwner {\\n        (address dapp, Claim memory claim) = abi.decode(\\n            _claimData,\\n            (address, Claim)\\n        );\\n\\n        require(claim.firstIndex <= claim.lastIndex, \\\"History: FI > LI\\\");\\n\\n        Claim[] storage dappClaims = claims[dapp];\\n        uint256 numDAppClaims = dappClaims.length;\\n\\n        require(\\n            claim.firstIndex ==\\n                (\\n                    (numDAppClaims == 0)\\n                        ? 0\\n                        : (dappClaims[numDAppClaims - 1].lastIndex + 1)\\n                ),\\n            \\\"History: unclaimed inputs\\\"\\n        );\\n\\n        dappClaims.push(claim);\\n\\n        emit NewClaimToHistory(dapp, claim);\\n    }\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    /// There are several requirements for this function to be called successfully.\\n    ///\\n    /// * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed\\n    ///   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`).\\n    ///\\n    /// * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims\\n    ///   that have been submitted to `_dapp` already.\\n    ///\\n    /// @inheritdoc IHistory\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        uint256 claimIndex = abi.decode(_proofContext, (uint256));\\n\\n        Claim memory claim = claims[_dapp][claimIndex];\\n\\n        return (claim.epochHash, claim.firstIndex, claim.lastIndex);\\n    }\\n\\n    /// @inheritdoc IHistory\\n    /// @dev Emits an `OwnershipTransferred` event. Should have access control.\\n    function migrateToConsensus(\\n        address _consensus\\n    ) external override onlyOwner {\\n        transferOwnership(_consensus);\\n    }\\n}\\n\",\"keccak256\":\"0x607253a9e73d3fe0b98e2c5d7b6f9ee1dad48d7cf4a1284b4f1361d74178da7a\",\"license\":\"Apache-2.0\"},\"contracts/history/IHistory.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\n/// @title History interface\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim.\\n    ///         The encoding of `_claimData` might vary\\n    ///         depending on the history implementation.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Should have access control.\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Transfer ownership to another consensus.\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control.\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the history implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\",\"keccak256\":\"0xfe0404f078a3a6f761beea8afbb2fac322fd2900f7ad2e2b866504c7aa54568f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161091f38038061091f83398101604081905261002f91610181565b61003833610057565b6001600160a01b038116331461005157610051816100a7565b506101b1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100af610125565b6001600160a01b0381166101195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61012281610057565b50565b6000546001600160a01b0316331461017f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610110565b565b60006020828403121561019357600080fd5b81516001600160a01b03811681146101aa57600080fd5b9392505050565b61075f806101c06000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063d79a824014610091578063ddfdfbb0146100bf578063f2fde38b146100d2578063fc411683146100e5575b600080fd5b61006f6100f8565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a461009f36600461052f565b61010c565b60408051938452602084019290925290820152606001610088565b61006f6100cd366004610584565b6101a5565b61006f6100e03660046105c6565b61039d565b61006f6100f33660046105c6565b610416565b610100610427565b61010a6000610481565b565b600080808061011d858701876105ea565b6001600160a01b0388166000908152600160205260408120805492935090918390811061014c5761014c610603565b60009182526020918290206040805160608101825260029390930290910180548084526001909101546001600160801b03808216958501869052600160801b90910416929091018290529a919950975095505050505050565b6101ad610427565b6000806101bc83850185610635565b9150915080604001516001600160801b031681602001516001600160801b031611156102225760405162461bcd60e51b815260206004820152601060248201526f486973746f72793a204649203e204c4960801b60448201526064015b60405180910390fd5b6001600160a01b038216600090815260016020526040902080548015610294578161024e6001836106e9565b8154811061025e5761025e610603565b906000526020600020906002020160010160109054906101000a90046001600160801b0316600161028f9190610702565b610297565b60005b6001600160801b031683602001516001600160801b0316146102fb5760405162461bcd60e51b815260206004820152601960248201527f486973746f72793a20756e636c61696d656420696e70757473000000000000006044820152606401610219565b8154600180820184556000848152602090819020865160029094020183815586820180516040808a0180516001600160801b03938416600160801b9185169190910217949096019390935582519586529051811692850192909252915116908201526001600160a01b038516907fb71880d7a0c514d48c0296b2721b0a4f9641a45117960f2ca86b5b7873c4ab2f9060600160405180910390a2505050505050565b6103a5610427565b6001600160a01b03811661040a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610219565b61041381610481565b50565b61041e610427565b6104138161039d565b6000546001600160a01b0316331461010a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610219565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461041357600080fd5b60008083601f8401126104f857600080fd5b50813567ffffffffffffffff81111561051057600080fd5b60208301915083602082850101111561052857600080fd5b9250929050565b60008060006040848603121561054457600080fd5b833561054f816104d1565b9250602084013567ffffffffffffffff81111561056b57600080fd5b610577868287016104e6565b9497909650939450505050565b6000806020838503121561059757600080fd5b823567ffffffffffffffff8111156105ae57600080fd5b6105ba858286016104e6565b90969095509350505050565b6000602082840312156105d857600080fd5b81356105e3816104d1565b9392505050565b6000602082840312156105fc57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b80356001600160801b038116811461063057600080fd5b919050565b600080828403608081121561064957600080fd5b8335610654816104d1565b92506060601f198201121561066857600080fd5b506040516060810181811067ffffffffffffffff8211171561069a57634e487b7160e01b600052604160045260246000fd5b8060405250602084013581526106b260408501610619565b60208201526106c360608501610619565b6040820152809150509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106fc576106fc6106d3565b92915050565b6001600160801b03818116838216019080821115610722576107226106d3565b509291505056fea26469706673582212201fc5dfb9d50cb3efefe40c7ced59b7b296f6d072ed8005ef3de36946cd77e28364736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063d79a824014610091578063ddfdfbb0146100bf578063f2fde38b146100d2578063fc411683146100e5575b600080fd5b61006f6100f8565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a461009f36600461052f565b61010c565b60408051938452602084019290925290820152606001610088565b61006f6100cd366004610584565b6101a5565b61006f6100e03660046105c6565b61039d565b61006f6100f33660046105c6565b610416565b610100610427565b61010a6000610481565b565b600080808061011d858701876105ea565b6001600160a01b0388166000908152600160205260408120805492935090918390811061014c5761014c610603565b60009182526020918290206040805160608101825260029390930290910180548084526001909101546001600160801b03808216958501869052600160801b90910416929091018290529a919950975095505050505050565b6101ad610427565b6000806101bc83850185610635565b9150915080604001516001600160801b031681602001516001600160801b031611156102225760405162461bcd60e51b815260206004820152601060248201526f486973746f72793a204649203e204c4960801b60448201526064015b60405180910390fd5b6001600160a01b038216600090815260016020526040902080548015610294578161024e6001836106e9565b8154811061025e5761025e610603565b906000526020600020906002020160010160109054906101000a90046001600160801b0316600161028f9190610702565b610297565b60005b6001600160801b031683602001516001600160801b0316146102fb5760405162461bcd60e51b815260206004820152601960248201527f486973746f72793a20756e636c61696d656420696e70757473000000000000006044820152606401610219565b8154600180820184556000848152602090819020865160029094020183815586820180516040808a0180516001600160801b03938416600160801b9185169190910217949096019390935582519586529051811692850192909252915116908201526001600160a01b038516907fb71880d7a0c514d48c0296b2721b0a4f9641a45117960f2ca86b5b7873c4ab2f9060600160405180910390a2505050505050565b6103a5610427565b6001600160a01b03811661040a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610219565b61041381610481565b50565b61041e610427565b6104138161039d565b6000546001600160a01b0316331461010a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610219565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461041357600080fd5b60008083601f8401126104f857600080fd5b50813567ffffffffffffffff81111561051057600080fd5b60208301915083602082850101111561052857600080fd5b9250929050565b60008060006040848603121561054457600080fd5b833561054f816104d1565b9250602084013567ffffffffffffffff81111561056b57600080fd5b610577868287016104e6565b9497909650939450505050565b6000806020838503121561059757600080fd5b823567ffffffffffffffff8111156105ae57600080fd5b6105ba858286016104e6565b90969095509350505050565b6000602082840312156105d857600080fd5b81356105e3816104d1565b9392505050565b6000602082840312156105fc57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b80356001600160801b038116811461063057600080fd5b919050565b600080828403608081121561064957600080fd5b8335610654816104d1565b92506060601f198201121561066857600080fd5b506040516060810181811067ffffffffffffffff8211171561069a57634e487b7160e01b600052604160045260246000fd5b8060405250602084013581526106b260408501610619565b60208201526106c360608501610619565b6040820152809150509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106fc576106fc6106d3565b92915050565b6001600160801b03818116838216019080821115610722576107226106d3565b509291505056fea26469706673582212201fc5dfb9d50cb3efefe40c7ced59b7b296f6d072ed8005ef3de36946cd77e28364736f6c63430008130033",
  "devdoc": {
    "details": "This contract inherits OpenZeppelin's `Ownable` contract.      For more information on `Ownable`, please consult OpenZeppelin's official documentation.",
    "events": {
      "NewClaimToHistory(address,(bytes32,uint128,uint128))": {
        "details": "MUST be triggered on a successful call to `submitClaim`.",
        "params": {
          "claim": "The newly-submitted claim",
          "dapp": "The address of the DApp"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_owner": "The initial owner"
        }
      },
      "getClaim(address,bytes)": {
        "params": {
          "_dapp": "The DApp address",
          "_proofContext": "Data for retrieving the desired claim"
        },
        "returns": {
          "_0": "The claimed epoch hash",
          "_1": "The index of the first input of the epoch in the input box",
          "_2": "The index of the last input of the epoch in the input box"
        }
      },
      "migrateToConsensus(address)": {
        "details": "Emits an `OwnershipTransferred` event. Should have access control.",
        "params": {
          "_consensus": "The new consensus"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "submitClaim(bytes)": {
        "details": "Emits a `NewClaimToHistory` event. Should have access control.",
        "params": {
          "_claimData": "Data for submitting a claim"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "claims": {
        "details": "See the `getClaim` and `submitClaim` functions."
      }
    },
    "title": "Simple History",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewClaimToHistory(address,(bytes32,uint128,uint128))": {
        "notice": "A new claim regarding a specific DApp was submitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates a `History` contract."
      },
      "getClaim(address,bytes)": {
        "notice": "Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already."
      },
      "migrateToConsensus(address)": {
        "notice": "Transfer ownership to another consensus."
      },
      "submitClaim(bytes)": {
        "notice": "Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs."
      }
    },
    "notice": "This contract stores claims for each DApp individually. This means that, for each DApp, the contract stores an array of `Claim` entries, where each `Claim` is composed of: * An epoch hash (`bytes32`) * A closed interval of input indices (`uint128`, `uint128`) The contract guarantees that the first interval starts at index 0, and that the following intervals don't have gaps or overlaps. Furthermore, claims can only be submitted by the contract owner through `submitClaim`, but can be retrieved by anyone with `getClaim`.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1155,
        "contract": "contracts/history/History.sol:History",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3072,
        "contract": "contracts/history/History.sol:History",
        "label": "claims",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Claim)3065_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Claim)3065_storage)dyn_storage": {
        "base": "t_struct(Claim)3065_storage",
        "encoding": "dynamic_array",
        "label": "struct History.Claim[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Claim)3065_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct History.Claim[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Claim)3065_storage)dyn_storage"
      },
      "t_struct(Claim)3065_storage": {
        "encoding": "inplace",
        "label": "struct History.Claim",
        "members": [
          {
            "astId": 3060,
            "contract": "contracts/history/History.sol:History",
            "label": "epochHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3062,
            "contract": "contracts/history/History.sol:History",
            "label": "firstIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3064,
            "contract": "contracts/history/History.sol:History",
            "label": "lastIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}