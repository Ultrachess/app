{
  "address": "0x1B282530a52F67ce4613Fe52D90273f960910afc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "ApplicationJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        }
      ],
      "name": "ConsensusCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IHistory",
          "name": "history",
          "type": "address"
        }
      ],
      "name": "NewHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proofContext",
          "type": "bytes"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHistory",
      "outputs": [
        {
          "internalType": "contract IHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensus",
          "type": "address"
        }
      ],
      "name": "migrateHistoryToConsensus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHistory",
          "name": "_history",
          "type": "address"
        }
      ],
      "name": "setHistory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_claimData",
          "type": "bytes"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xadee6732a38bf11e50e795a6bfb60077955bfac26ed53853269c413afc24669b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "521806",
    "logsBloom": "0x
    "blockHash": "0xfea8ae65a8ba0831b284f723c3e37e2741c86acdd5c615f186b8d2e4ec8f88f0",
    "transactionHash": "0xadee6732a38bf11e50e795a6bfb60077955bfac26ed53853269c413afc24669b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xadee6732a38bf11e50e795a6bfb60077955bfac26ed53853269c413afc24669b",
        "address": "0x1B282530a52F67ce4613Fe52D90273f960910afc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfea8ae65a8ba0831b284f723c3e37e2741c86acdd5c615f186b8d2e4ec8f88f0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xadee6732a38bf11e50e795a6bfb60077955bfac26ed53853269c413afc24669b",
        "address": "0x1B282530a52F67ce4613Fe52D90273f960910afc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfea8ae65a8ba0831b284f723c3e37e2741c86acdd5c615f186b8d2e4ec8f88f0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xadee6732a38bf11e50e795a6bfb60077955bfac26ed53853269c413afc24669b",
        "address": "0x1B282530a52F67ce4613Fe52D90273f960910afc",
        "topics": [
          "0x583f764398dc1f7529b3e4472cb331312f6b6d76744da14476f571a330d36e23"
        ],
        "data": "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000005a723220579c0dcb8c9253e6b4c62e572e379945",
        "logIndex": 2,
        "blockHash": "0xfea8ae65a8ba0831b284f723c3e37e2741c86acdd5c615f186b8d2e4ec8f88f0"
      }
    ],
    "blockNumber": 19,
    "cumulativeGasUsed": "521806",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x5a723220579C0DCb8C9253E6b4c62e572E379945"
  ],
  "numDeployments": 1,
  "solcInputHash": "ccf852a6f03ad282136085842817ac99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"ApplicationJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"}],\"name\":\"ConsensusCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IHistory\",\"name\":\"history\",\"type\":\"address\"}],\"name\":\"NewHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proofContext\",\"type\":\"bytes\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistory\",\"outputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensus\",\"type\":\"address\"}],\"name\":\"migrateHistoryToConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"_history\",\"type\":\"address\"}],\"name\":\"setHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract inherits `AbstractConsensus` and OpenZeppelin's `Ownable` contract.      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\",\"events\":{\"ApplicationJoined(address)\":{\"details\":\"MUST be triggered on a successful call to `join`.\",\"params\":{\"application\":\"The application\"}},\"ConsensusCreated(address,address)\":{\"details\":\"MUST be triggered during construction.\",\"params\":{\"inputBox\":\"The input box from which the authority fetches new inputs\",\"owner\":\"The address that initially owns the `Authority` contract\"}},\"NewHistory(address)\":{\"details\":\"MUST be triggered on a successful call to `setHistory`.\",\"params\":{\"history\":\"The new history contract\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits a `ConsensusCreated` event.\",\"params\":{\"_inputBox\":\"The input box contract\",\"_owner\":\"The initial contract owner\"}},\"getClaim(address,bytes)\":{\"params\":{\"_dapp\":\"The DApp address\",\"_proofContext\":\"Data for retrieving the desired claim\"},\"returns\":{\"_0\":\"The claimed epoch hash\",\"_1\":\"The index of the first input of the epoch in the input box\",\"_2\":\"The index of the last input of the epoch in the input box\"}},\"getHistory()\":{\"returns\":{\"_0\":\"The current history contract\"}},\"migrateHistoryToConsensus(address)\":{\"details\":\"Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.\",\"params\":{\"_consensus\":\"The new owner of the current history contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setHistory(address)\":{\"details\":\"Emits a `NewHistory` event.      Can only be called by the `Authority` owner.\",\"params\":{\"_history\":\"The new history contract\"}},\"submitClaim(bytes)\":{\"details\":\"Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.\",\"params\":{\"_claimData\":\"Data for submitting a claim\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20Tokens(address,address,uint256)\":{\"details\":\"Can only be called by the `Authority` owner.\",\"params\":{\"_amount\":\"The amount of tokens to be withdrawn\",\"_recipient\":\"The recipient address\",\"_token\":\"The token contract\"}}},\"stateVariables\":{\"history\":{\"details\":\"See the `getHistory` and `setHistory` functions.\"}},\"title\":\"Authority consensus\",\"version\":1},\"userdoc\":{\"events\":{\"ApplicationJoined(address)\":{\"notice\":\"An application has joined the consensus' validation set.\"},\"ConsensusCreated(address,address)\":{\"notice\":\"The `Authority` contract was created.\"},\"NewHistory(address)\":{\"notice\":\"A new history contract is used to store claims.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs an `Authority` contract.\"},\"getClaim(address,bytes)\":{\"notice\":\"Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.\"},\"getHistory()\":{\"notice\":\"Get the current history contract.\"},\"join()\":{\"notice\":\"Emits an `ApplicationJoined` event with the message sender.\"},\"migrateHistoryToConsensus(address)\":{\"notice\":\"Transfer ownership over the current history contract to `_consensus`.\"},\"setHistory(address)\":{\"notice\":\"Make `Authority` point to another history contract.\"},\"submitClaim(bytes)\":{\"notice\":\"Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.\"},\"withdrawERC20Tokens(address,address,uint256)\":{\"notice\":\"Transfer some amount of ERC-20 tokens to a recipient.\"}},\"notice\":\"A consensus model controlled by a single address, the owner.         Claims are stored in an auxiliary contract called `History`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/authority/Authority.sol\":\"Authority\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\n\\n/// @title Abstract Consensus\\n/// @notice An abstract contract that partially implements `IConsensus`.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice Emits an `ApplicationJoined` event with the message sender.\\n    function join() external override {\\n        emit ApplicationJoined(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x0483d8a8557c4e345eca5ad31ffea560737b08c75ade0430106136a89d755e13\",\"license\":\"Apache-2.0\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Consensus interface\\n///\\n/// @notice This contract defines a generic interface for consensuses.\\n/// We use the word \\\"consensus\\\" to designate a contract that provides claims\\n/// in the base layer regarding the state of off-chain machines running in\\n/// the execution layer. How this contract is able to reach consensus, who is\\n/// able to submit claims, and how are claims stored in the base layer are\\n/// some of the implementation details left unspecified by this interface.\\n///\\n/// From the point of view of a DApp, these claims are necessary to validate\\n/// on-chain action allowed by the off-chain machine in the form of vouchers\\n/// and notices. Each claim is composed of three parts: an epoch hash, a first\\n/// index, and a last index. We'll explain each of these parts below.\\n///\\n/// First, let us define the word \\\"epoch\\\". For finality reasons, we need to\\n/// divide the stream of inputs being fed into the off-chain machine into\\n/// batches of inputs, which we call \\\"epoches\\\". At the end of every epoch,\\n/// we summarize the state of the off-chain machine in a single hash, called\\n/// \\\"epoch hash\\\". Please note that this interface does not define how this\\n/// stream of inputs is being chopped up into epoches.\\n///\\n/// The other two parts are simply the indices of the first and last inputs\\n/// accepted during the epoch. Logically, the first index MUST BE less than\\n/// or equal to the last index. As a result, every epoch MUST accept at least\\n/// one input. This assumption stems from the fact that the state of a machine\\n/// can only change after an input is fed into it.\\n///\\n/// Examples of possible implementations of this interface include:\\n///\\n/// * An authority consensus, controlled by a single address who has full\\n///   control over epoch boundaries, claim submission, asset management, etc.\\n///\\n/// * A quorum consensus, controlled by a limited set of validators, that\\n///   vote on the state of the machine at the end of every epoch. Also, epoch\\n///   boundaries are determined by the timestamp in the base layer, and assets\\n///   are split equally amongst the validators.\\n///\\n/// * An NxN consensus, which allows anyone to submit and dispute claims\\n///   in the base layer. Epoch boundaries are determined in the same fashion\\n///   as in the quorum example.\\n///\\ninterface IConsensus {\\n    /// @notice An application has joined the consensus' validation set.\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `join`.\\n    event ApplicationJoined(address application);\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Signal the consensus that the message sender wants to join its validation set.\\n    /// @dev MUST fire an `ApplicationJoined` event with the message sender as argument.\\n    function join() external;\\n}\\n\",\"keccak256\":\"0x5d59c8dc3c1483e3173837d679093000077bf175c0b3ad7f02f0ffe611c0a89e\",\"license\":\"Apache-2.0\"},\"contracts/consensus/authority/Authority.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {IInputBox} from \\\"../../inputs/IInputBox.sol\\\";\\nimport {IHistory} from \\\"../../history/IHistory.sol\\\";\\n\\n/// @title Authority consensus\\n/// @notice A consensus model controlled by a single address, the owner.\\n///         Claims are stored in an auxiliary contract called `History`.\\n/// @dev This contract inherits `AbstractConsensus` and OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract Authority is AbstractConsensus, Ownable {\\n    /// @notice The current history contract.\\n    /// @dev See the `getHistory` and `setHistory` functions.\\n    IHistory internal history;\\n\\n    /// @notice The `Authority` contract was created.\\n    /// @param owner The address that initially owns the `Authority` contract\\n    /// @param inputBox The input box from which the authority fetches new inputs\\n    /// @dev MUST be triggered during construction.\\n    event ConsensusCreated(address owner, IInputBox inputBox);\\n\\n    /// @notice A new history contract is used to store claims.\\n    /// @param history The new history contract\\n    /// @dev MUST be triggered on a successful call to `setHistory`.\\n    event NewHistory(IHistory history);\\n\\n    /// @notice Constructs an `Authority` contract.\\n    /// @param _owner The initial contract owner\\n    /// @param _inputBox The input box contract\\n    /// @dev Emits a `ConsensusCreated` event.\\n    constructor(address _owner, IInputBox _inputBox) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (msg.sender != _owner) {\\n            transferOwnership(_owner);\\n        }\\n        emit ConsensusCreated(_owner, _inputBox);\\n    }\\n\\n    /// @notice Submits a claim to the current history contract.\\n    ///         The encoding of `_claimData` might vary depending on the\\n    ///         implementation of the current history contract.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Can only be called by the `Authority` owner,\\n    ///      and the `Authority` contract must have ownership over\\n    ///      its current history contract.\\n    function submitClaim(bytes calldata _claimData) external onlyOwner {\\n        history.submitClaim(_claimData);\\n    }\\n\\n    /// @notice Transfer ownership over the current history contract to `_consensus`.\\n    /// @param _consensus The new owner of the current history contract\\n    /// @dev Can only be called by the `Authority` owner,\\n    ///      and the `Authority` contract must have ownership over\\n    ///      its current history contract.\\n    function migrateHistoryToConsensus(address _consensus) external onlyOwner {\\n        history.migrateToConsensus(_consensus);\\n    }\\n\\n    /// @notice Make `Authority` point to another history contract.\\n    /// @param _history The new history contract\\n    /// @dev Emits a `NewHistory` event.\\n    ///      Can only be called by the `Authority` owner.\\n    function setHistory(IHistory _history) external onlyOwner {\\n        history = _history;\\n        emit NewHistory(_history);\\n    }\\n\\n    /// @notice Get the current history contract.\\n    /// @return The current history contract\\n    function getHistory() external view returns (IHistory) {\\n        return history;\\n    }\\n\\n    /// @notice Get a claim from the current history.\\n    ///         The encoding of `_proofContext` might vary depending on the\\n    ///         implementation of the current history contract.\\n    /// @inheritdoc IConsensus\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        return history.getClaim(_dapp, _proofContext);\\n    }\\n\\n    /// @notice Transfer some amount of ERC-20 tokens to a recipient.\\n    /// @param _token The token contract\\n    /// @param _recipient The recipient address\\n    /// @param _amount The amount of tokens to be withdrawn\\n    /// @dev Can only be called by the `Authority` owner.\\n    function withdrawERC20Tokens(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(\\n            _token.transfer(_recipient, _amount),\\n            \\\"Authority: withdrawal failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0a37f82a0c924deeb8fa5baa6ff0133054037170dadd0032b81f4c93c3ca1c91\",\"license\":\"Apache-2.0\"},\"contracts/history/IHistory.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\n/// @title History interface\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim.\\n    ///         The encoding of `_claimData` might vary\\n    ///         depending on the history implementation.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Should have access control.\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Transfer ownership to another consensus.\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control.\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the history implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\",\"keccak256\":\"0xfe0404f078a3a6f761beea8afbb2fac322fd2900f7ad2e2b866504c7aa54568f\",\"license\":\"Apache-2.0\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// Copyright Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Input Box interface\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp's input box.\\n    /// @param dapp The address of the DApp\\n    /// @param inboxInputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    /// @dev MUST be triggered on a successful call to `addInput`.\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inboxInputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    /// @dev MUST fire an `InputAdded` event accordingly.\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp's input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp's input box\\n    /// @return The hash of the input at the provided index in the DApp's input box\\n    /// @dev `_index` MUST be in the interval `[0,n)` where `n` is the number of\\n    ///      inputs in the DApp's input box. See the `getNumberOfInputs` function.\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2addd467a24cde2131784103080aeb28df40d87ba19c5fd92bf96c0c074603df\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109ef3803806109ef83398101604081905261002f916101da565b6100383361009b565b336001600160a01b0383161461005157610051826100eb565b604080516001600160a01b038085168252831660208201527f583f764398dc1f7529b3e4472cb331312f6b6d76744da14476f571a330d36e23910160405180910390a15050610214565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100f3610169565b6001600160a01b03811661015d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101668161009b565b50565b6000546001600160a01b031633146101c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610154565b565b6001600160a01b038116811461016657600080fd5b600080604083850312156101ed57600080fd5b82516101f8816101c5565b6020840151909250610209816101c5565b809150509250929050565b6107cc806102236000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b688a36311610066578063b688a3631461010e578063bcdd1e1314610116578063d79a824014610129578063ddfdfbb014610157578063f2fde38b1461016a57600080fd5b8063159c5ea1146100a3578063715018a6146100b85780638da5cb5b146100c05780639368a3d3146100ea578063aa15efc8146100fd575b600080fd5b6100b66100b136600461058e565b61017d565b005b6100b66101d9565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66100f836600461058e565b6101ed565b6001546001600160a01b03166100cd565b6100b6610257565b6100b66101243660046105b2565b61028c565b61013c61013736600461063c565b61035d565b604080519384526020840192909252908201526060016100e1565b6100b6610165366004610691565b6103e6565b6100b661017836600461058e565b610456565b6101856104cf565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e9060200160405180910390a150565b6101e16104cf565b6101eb6000610529565b565b6101f56104cf565b60015460405163fc41168360e01b81526001600160a01b0383811660048301529091169063fc41168390602401600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b5050505050565b6040513381527f27c2b702d3bff195a18baca2daf00b20a986177c5f1449af4e2d46a3c3e02ce59060200160405180910390a1565b6102946104cf565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030791906106d3565b6103585760405162461bcd60e51b815260206004820152601c60248201527f417574686f726974793a207769746864726177616c206661696c65640000000060448201526064015b60405180910390fd5b505050565b60015460405163035e6a0960e61b8152600091829182916001600160a01b03169063d79a8240906103969089908990899060040161071e565b606060405180830381865afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d7919061074c565b92509250925093509350939050565b6103ee6104cf565b600154604051630ddfdfbb60e41b81526001600160a01b039091169063ddfdfbb090610420908590859060040161077a565b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b505050505050565b61045e6104cf565b6001600160a01b0381166104c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034f565b6104cc81610529565b50565b6000546001600160a01b031633146101eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146104cc57600080fd5b6000602082840312156105a057600080fd5b81356105ab81610579565b9392505050565b6000806000606084860312156105c757600080fd5b83356105d281610579565b925060208401356105e281610579565b929592945050506040919091013590565b60008083601f84011261060557600080fd5b50813567ffffffffffffffff81111561061d57600080fd5b60208301915083602082850101111561063557600080fd5b9250929050565b60008060006040848603121561065157600080fd5b833561065c81610579565b9250602084013567ffffffffffffffff81111561067857600080fd5b610684868287016105f3565b9497909650939450505050565b600080602083850312156106a457600080fd5b823567ffffffffffffffff8111156106bb57600080fd5b6106c7858286016105f3565b90969095509350505050565b6000602082840312156106e557600080fd5b815180151581146105ab57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061074390830184866106f5565b95945050505050565b60008060006060848603121561076157600080fd5b8351925060208401519150604084015190509250925092565b60208152600061078e6020830184866106f5565b94935050505056fea264697066735822122021f66c26bc1cded7ab5457f04d0a74c5257b6aa88e7d69d7f9ad0713ba4679e664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b688a36311610066578063b688a3631461010e578063bcdd1e1314610116578063d79a824014610129578063ddfdfbb014610157578063f2fde38b1461016a57600080fd5b8063159c5ea1146100a3578063715018a6146100b85780638da5cb5b146100c05780639368a3d3146100ea578063aa15efc8146100fd575b600080fd5b6100b66100b136600461058e565b61017d565b005b6100b66101d9565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66100f836600461058e565b6101ed565b6001546001600160a01b03166100cd565b6100b6610257565b6100b66101243660046105b2565b61028c565b61013c61013736600461063c565b61035d565b604080519384526020840192909252908201526060016100e1565b6100b6610165366004610691565b6103e6565b6100b661017836600461058e565b610456565b6101856104cf565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e9060200160405180910390a150565b6101e16104cf565b6101eb6000610529565b565b6101f56104cf565b60015460405163fc41168360e01b81526001600160a01b0383811660048301529091169063fc41168390602401600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b5050505050565b6040513381527f27c2b702d3bff195a18baca2daf00b20a986177c5f1449af4e2d46a3c3e02ce59060200160405180910390a1565b6102946104cf565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030791906106d3565b6103585760405162461bcd60e51b815260206004820152601c60248201527f417574686f726974793a207769746864726177616c206661696c65640000000060448201526064015b60405180910390fd5b505050565b60015460405163035e6a0960e61b8152600091829182916001600160a01b03169063d79a8240906103969089908990899060040161071e565b606060405180830381865afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d7919061074c565b92509250925093509350939050565b6103ee6104cf565b600154604051630ddfdfbb60e41b81526001600160a01b039091169063ddfdfbb090610420908590859060040161077a565b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b505050505050565b61045e6104cf565b6001600160a01b0381166104c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034f565b6104cc81610529565b50565b6000546001600160a01b031633146101eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146104cc57600080fd5b6000602082840312156105a057600080fd5b81356105ab81610579565b9392505050565b6000806000606084860312156105c757600080fd5b83356105d281610579565b925060208401356105e281610579565b929592945050506040919091013590565b60008083601f84011261060557600080fd5b50813567ffffffffffffffff81111561061d57600080fd5b60208301915083602082850101111561063557600080fd5b9250929050565b60008060006040848603121561065157600080fd5b833561065c81610579565b9250602084013567ffffffffffffffff81111561067857600080fd5b610684868287016105f3565b9497909650939450505050565b600080602083850312156106a457600080fd5b823567ffffffffffffffff8111156106bb57600080fd5b6106c7858286016105f3565b90969095509350505050565b6000602082840312156106e557600080fd5b815180151581146105ab57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061074390830184866106f5565b95945050505050565b60008060006060848603121561076157600080fd5b8351925060208401519150604084015190509250925092565b60208152600061078e6020830184866106f5565b94935050505056fea264697066735822122021f66c26bc1cded7ab5457f04d0a74c5257b6aa88e7d69d7f9ad0713ba4679e664736f6c63430008130033",
  "devdoc": {
    "details": "This contract inherits `AbstractConsensus` and OpenZeppelin's `Ownable` contract.      For more information on `Ownable`, please consult OpenZeppelin's official documentation.",
    "events": {
      "ApplicationJoined(address)": {
        "details": "MUST be triggered on a successful call to `join`.",
        "params": {
          "application": "The application"
        }
      },
      "ConsensusCreated(address,address)": {
        "details": "MUST be triggered during construction.",
        "params": {
          "inputBox": "The input box from which the authority fetches new inputs",
          "owner": "The address that initially owns the `Authority` contract"
        }
      },
      "NewHistory(address)": {
        "details": "MUST be triggered on a successful call to `setHistory`.",
        "params": {
          "history": "The new history contract"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Emits a `ConsensusCreated` event.",
        "params": {
          "_inputBox": "The input box contract",
          "_owner": "The initial contract owner"
        }
      },
      "getClaim(address,bytes)": {
        "params": {
          "_dapp": "The DApp address",
          "_proofContext": "Data for retrieving the desired claim"
        },
        "returns": {
          "_0": "The claimed epoch hash",
          "_1": "The index of the first input of the epoch in the input box",
          "_2": "The index of the last input of the epoch in the input box"
        }
      },
      "getHistory()": {
        "returns": {
          "_0": "The current history contract"
        }
      },
      "migrateHistoryToConsensus(address)": {
        "details": "Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.",
        "params": {
          "_consensus": "The new owner of the current history contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setHistory(address)": {
        "details": "Emits a `NewHistory` event.      Can only be called by the `Authority` owner.",
        "params": {
          "_history": "The new history contract"
        }
      },
      "submitClaim(bytes)": {
        "details": "Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.",
        "params": {
          "_claimData": "Data for submitting a claim"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20Tokens(address,address,uint256)": {
        "details": "Can only be called by the `Authority` owner.",
        "params": {
          "_amount": "The amount of tokens to be withdrawn",
          "_recipient": "The recipient address",
          "_token": "The token contract"
        }
      }
    },
    "stateVariables": {
      "history": {
        "details": "See the `getHistory` and `setHistory` functions."
      }
    },
    "title": "Authority consensus",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApplicationJoined(address)": {
        "notice": "An application has joined the consensus' validation set."
      },
      "ConsensusCreated(address,address)": {
        "notice": "The `Authority` contract was created."
      },
      "NewHistory(address)": {
        "notice": "A new history contract is used to store claims."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs an `Authority` contract."
      },
      "getClaim(address,bytes)": {
        "notice": "Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract."
      },
      "getHistory()": {
        "notice": "Get the current history contract."
      },
      "join()": {
        "notice": "Emits an `ApplicationJoined` event with the message sender."
      },
      "migrateHistoryToConsensus(address)": {
        "notice": "Transfer ownership over the current history contract to `_consensus`."
      },
      "setHistory(address)": {
        "notice": "Make `Authority` point to another history contract."
      },
      "submitClaim(bytes)": {
        "notice": "Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract."
      },
      "withdrawERC20Tokens(address,address,uint256)": {
        "notice": "Transfer some amount of ERC-20 tokens to a recipient."
      }
    },
    "notice": "A consensus model controlled by a single address, the owner.         Claims are stored in an auxiliary contract called `History`.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1155,
        "contract": "contracts/consensus/authority/Authority.sol:Authority",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2248,
        "contract": "contracts/consensus/authority/Authority.sol:Authority",
        "label": "history",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHistory)3266"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHistory)3266": {
        "encoding": "inplace",
        "label": "contract IHistory",
        "numberOfBytes": "20"
      }
    }
  }
}