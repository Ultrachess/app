################################################################################
# This workflow will do a clean install of node dependencies and build the
# source code across different versions of node.
#
# For more information see:
#
#   https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
#
################################################################################

name: Node.js CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in
# parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    env:
      NETWORK: goerli
      MNEMONIC: ${{ secrets.GOERLI_MNEMONIC }}
      RPC_URL: ${{ secrets.GOERLI_RPC_URL }}
      WSS_URL: ${{ secrets.GOERLI_WSS_URL }}
      VALIDATORS: '0x18930e8a66a1DbE21D00581216789AAB7460Afd0'
      GAS_PRICE: 100
      GAS_LIMIT: 2800000
      DAPP_NAME: chessAppNew
      BLOCK_CONFIRMATIONS: 1
      BLOCK_CONFIRMATIONS_TX: 2
      CHAIN_ID: 5

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: self-hosted
            node-version: 14
          # - os: ubuntu-22.04
          #   node-version: 18

    # Steps represent a sequence of tasks that will be executed as part of the
    # job
    steps:
      - name: Build environment information
        run: 'echo "Matrix OS: ${{ matrix.os }} on $HOSTNAME with $(getconf _NPROCESSORS_ONLN) cores"'

        # Check-out the repository under $GITHUB_WORKSPACE, so the job can
        # access it
      - name: Checkout main repo
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      # Add the Docker installation step
      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker $USER
          newgrp docker

      - name: Restore node modules
        id: restore-node
        uses: actions/cache@v3
        with:
          path: |
            front/node_modules
          key: node-install-${{ matrix.node-version }}-${{ hashFiles('front/package.json', 'front/package-lock.json') }}

      - name: Restore dapp artifacts
        id: restore-artifacts
        uses: actions/cache@v3
        with:
          path: |
            deployments/localhost
            export
          key: restore-artifacts-${{ hashFiles('docker-compose-deploy.yml', 'docker-compose.override.yml') }}
      
      # Install dependencies
      - name: Install Yarn
        run: npm install -g yarn

      - name: Reset Nginx configurations and install Nginx
        run: |
          sudo rm -rf /etc/nginx/sites-available/default
          sudo rm -rf /etc/nginx/sites-enabled/default
          sudo apt-get update
          sudo apt-get install --reinstall -y nginx
          # Create a minimal nginx.conf
          echo 'events {
            worker_connections 1024;
          }
          
          http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            sendfile on;
            access_log /var/log/nginx/access.log;
            error_log /var/log/nginx/error.log debug;
            keepalive_timeout 65;

            include /etc/nginx/sites-enabled/*;
          }' | sudo tee /etc/nginx/nginx.conf > /dev/null

      - name: yarn install
        if: steps.restore-node.outputs.cache-hit != 'true'
        working-directory: front
        run: yarn install

      - name: yarn audit-ci
        working-directory: front
        run: yarn audit-ci

      - name: yarn prettier
        working-directory: front
        run: yarn prettier

      #- name: yarn eslint
      #  working-directory: front
      #  run: yarn eslint

      # Build dapp
      - name: Build dapp
        #if: steps.restore-artifacts.outputs.cache-hit != 'true'
        run: docker buildx bake -f docker-bake.hcl -f docker-bake.override.hcl --load

      # Build machine
      - name: Build machine
        #if: steps.restore-artifacts.outputs.cache-hit != 'true'
        run: docker buildx bake -f docker-bake.hcl -f docker-bake.override.hcl machine --load

      - name: Deploy dapp
        run: |
          docker compose down -v
          DAPP_NAME=chessAppNew nohup docker compose -f ./docker-compose-testnet.yml -f ./docker-compose.override.yml up > deployment.log 2>&1 &
          echo "PID=$!" >> $GITHUB_ENV
          sleep 60

      # Build front end
      - name: yarn run build
        working-directory: front
        run: yarn run build

      # Check if the /front/dist folder exists and remove it if it does
      - name: Check and remove /front/dist folder if it exists
        run: |
          if [ -d "/front/dist" ]; then
            sudo rm -rf /front/dist
          fi

      # Serve front end
      - name: Copy nginx configuration and frontend files
        run: |
          sudo cp nginx.conf /etc/nginx/sites-available/default
          sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
          sudo mkdir -p /front
          sudo cp -R $GITHUB_WORKSPACE/front/dist /front/
      
      # Set Nginx file permissions
      - name: Set Nginx file permissions
        run: |
          sudo chown -R www-data:www-data /front/dist
          sudo find /front/dist -type d -exec chmod 755 {} \;
          sudo find /front/dist -type f -exec chmod 644 {} \;

      # Restart Nginx
      - name: Restart Nginx
        run: sudo systemctl restart nginx || echo "Nginx restart failed"

      - name: Display Nginx logs
        run: |
          echo "=== Nginx Error Log ==="
          sudo cat /var/log/nginx/error.log
          echo "=== Nginx Access Log ==="
          sudo cat /var/log/nginx/access.log


      
